// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    about         String?
    nickname      String?
    customTraits  String[]
    whatDoYouDo   String?
    image         String?
    accounts      Account[]
    sessions      Session[] 
    chats         Chat[]
    subscription  Subscription?  @relation("user_subscription")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String @unique
  plan      Plan
  paymentId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User       @relation("user_subscription", fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}


model Transaction {
  id          String           @id @default(cuid())
  userId      String
  amount      Int
  currency    String
  paymentId   String
  orderId     String
  plan        Plan
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId])
}

model Chat {
    id String @id @default(cuid())
    userId String
    isSaved Boolean @default(false)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages Message[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}

model Message {
    id String @id @default(cuid())
    chatId String
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    content String
    role MessageRole
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([chatId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Plan {
    FREE
    PRO
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
}